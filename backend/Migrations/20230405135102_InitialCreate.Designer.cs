// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VisaCenterBackend.DB;

#nullable disable

namespace VisaCenterBackend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230405135102_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VisaCenterBackend.DB.Entities.ConfirmationEmailEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ConfirmationEmailEntity", (string)null);
                });

            modelBuilder.Entity("VisaCenterBackend.DB.Entities.ConfirmationPhoneEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ConfirmationPhoneEntity", (string)null);
                });

            modelBuilder.Entity("VisaCenterBackend.DB.Entities.EmployeeEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("EmployeeEntity", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("83dbaba4-b9c4-4962-9dab-4d35271f311f"),
                            CreatedAt = new DateTime(2023, 4, 5, 13, 51, 2, 755, DateTimeKind.Utc).AddTicks(4765),
                            FirstName = "Иван",
                            IsAdmin = true,
                            LastName = "Иванов"
                        },
                        new
                        {
                            UserId = new Guid("70271e9c-2862-4802-86b7-b4c3a40f9225"),
                            CreatedAt = new DateTime(2023, 4, 5, 13, 51, 2, 755, DateTimeKind.Utc).AddTicks(4768),
                            FirstName = "Петр",
                            IsAdmin = false,
                            LastName = "Петров"
                        });
                });

            modelBuilder.Entity("VisaCenterBackend.DB.Entities.NotificationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("NotificationEntity", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7c3644fd-af32-4efb-bf9a-b62f27bcf487"),
                            Content = "Тут текст сообщения 1",
                            CreatedAt = new DateTime(2023, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Сообщение 1"
                        },
                        new
                        {
                            Id = new Guid("5503d2c8-9de3-4a18-89e0-0d5458df3c4e"),
                            Content = "Тут текст сообщения 2",
                            CreatedAt = new DateTime(2023, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Сообщение 2"
                        },
                        new
                        {
                            Id = new Guid("1f80e04f-7ccd-4384-bcd2-2e8ae526e1de"),
                            Content = "Тут текст сообщения 3",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Сообщение 3"
                        });
                });

            modelBuilder.Entity("VisaCenterBackend.DB.Entities.NotificationToUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("NotificationToUser", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("83dbaba4-b9c4-4962-9dab-4d35271f311f"),
                            NotificationId = new Guid("7c3644fd-af32-4efb-bf9a-b62f27bcf487"),
                            CreatedAt = new DateTime(2023, 4, 5, 13, 51, 2, 755, DateTimeKind.Utc).AddTicks(4827),
                            IsRead = false
                        },
                        new
                        {
                            UserId = new Guid("70271e9c-2862-4802-86b7-b4c3a40f9225"),
                            NotificationId = new Guid("7c3644fd-af32-4efb-bf9a-b62f27bcf487"),
                            CreatedAt = new DateTime(2023, 4, 5, 13, 51, 2, 755, DateTimeKind.Utc).AddTicks(4830),
                            IsRead = false
                        },
                        new
                        {
                            UserId = new Guid("83dbaba4-b9c4-4962-9dab-4d35271f311f"),
                            NotificationId = new Guid("5503d2c8-9de3-4a18-89e0-0d5458df3c4e"),
                            CreatedAt = new DateTime(2023, 4, 5, 13, 51, 2, 755, DateTimeKind.Utc).AddTicks(4832),
                            IsRead = true
                        },
                        new
                        {
                            UserId = new Guid("83dbaba4-b9c4-4962-9dab-4d35271f311f"),
                            NotificationId = new Guid("1f80e04f-7ccd-4384-bcd2-2e8ae526e1de"),
                            CreatedAt = new DateTime(2023, 4, 5, 13, 51, 2, 755, DateTimeKind.Utc).AddTicks(4833),
                            IsRead = true
                        });
                });

            modelBuilder.Entity("VisaCenterBackend.DB.Entities.StudentArrivalNoticeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvitingSide")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profession")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceivingSide")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("StudentArrivalNoticeEntity", (string)null);
                });

            modelBuilder.Entity("VisaCenterBackend.DB.Entities.StudentCloseRelativeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressContinuousResidence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Citizenship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCloseRelativeEntity", (string)null);
                });

            modelBuilder.Entity("VisaCenterBackend.DB.Entities.StudentEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArrivalNoticeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Course")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Curator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Faculty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MigrationCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PassportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId");

                    b.HasIndex("ArrivalNoticeId")
                        .IsUnique();

                    b.HasIndex("MigrationCardId")
                        .IsUnique();

                    b.HasIndex("PassportId")
                        .IsUnique();

                    b.HasIndex("VisaId")
                        .IsUnique();

                    b.ToTable("StudentEntity", (string)null);
                });

            modelBuilder.Entity("VisaCenterBackend.DB.Entities.StudentMigrationCardEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Series")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("StudentMigrationCardEntity", (string)null);
                });

            modelBuilder.Entity("VisaCenterBackend.DB.Entities.StudentPassportEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Citizenship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Series")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("StudentPassportEntity", (string)null);
                });

            modelBuilder.Entity("VisaCenterBackend.DB.Entities.StudentVisaEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BlankSeries")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvitationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("StudentVisaEntity", (string)null);
                });

            modelBuilder.Entity("VisaCenterBackend.DB.Entities.StudentVisaRequestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressInCountryOfContinuousResidence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressOfMigrationRegistration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttachedDocuments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstimatedRouteOfStay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Multiplicity")
                        .HasColumnType("int");

                    b.Property<string>("PlaceOfWorkOrStudyAndEmploymentPosition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RussianFederationRelatives")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentVisaRequestEntity", (string)null);
                });

            modelBuilder.Entity("VisaCenterBackend.DB.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsLoggedIn")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastActivity")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("UserEntity", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("83dbaba4-b9c4-4962-9dab-4d35271f311f"),
                            CreatedAt = new DateTime(2023, 4, 5, 13, 51, 2, 755, DateTimeKind.Utc).AddTicks(4438),
                            Email = "admin@mail.ru",
                            IsLoggedIn = false,
                            Password = "123"
                        },
                        new
                        {
                            Id = new Guid("70271e9c-2862-4802-86b7-b4c3a40f9225"),
                            CreatedAt = new DateTime(2023, 4, 5, 13, 51, 2, 755, DateTimeKind.Utc).AddTicks(4501),
                            Email = "employee@mail.ru",
                            IsLoggedIn = false,
                            Password = "321"
                        },
                        new
                        {
                            Id = new Guid("341f9502-5b87-488f-a0f8-e676d389eafb"),
                            CreatedAt = new DateTime(2023, 4, 5, 13, 51, 2, 755, DateTimeKind.Utc).AddTicks(4504),
                            Email = "student@mail.ru",
                            IsLoggedIn = false,
                            Password = "123321"
                        });
                });

            modelBuilder.Entity("VisaCenterBackend.DB.Entities.EmployeeEntity", b =>
                {
                    b.HasOne("VisaCenterBackend.DB.Entities.UserEntity", "User")
                        .WithOne("Employee")
                        .HasForeignKey("VisaCenterBackend.DB.Entities.EmployeeEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VisaCenterBackend.DB.Entities.NotificationToUser", b =>
                {
                    b.HasOne("VisaCenterBackend.DB.Entities.NotificationEntity", "Notification")
                        .WithMany("NotificationToUsers")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VisaCenterBackend.DB.Entities.UserEntity", "User")
                        .WithMany("NotificationToUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VisaCenterBackend.DB.Entities.StudentCloseRelativeEntity", b =>
                {
                    b.HasOne("VisaCenterBackend.DB.Entities.StudentEntity", "Student")
                        .WithMany("CloseRelatives")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("VisaCenterBackend.DB.Entities.StudentEntity", b =>
                {
                    b.HasOne("VisaCenterBackend.DB.Entities.StudentArrivalNoticeEntity", "ArrivalNotice")
                        .WithOne("Student")
                        .HasForeignKey("VisaCenterBackend.DB.Entities.StudentEntity", "ArrivalNoticeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VisaCenterBackend.DB.Entities.StudentMigrationCardEntity", "MigrationCard")
                        .WithOne("Student")
                        .HasForeignKey("VisaCenterBackend.DB.Entities.StudentEntity", "MigrationCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VisaCenterBackend.DB.Entities.StudentPassportEntity", "Passport")
                        .WithOne("Student")
                        .HasForeignKey("VisaCenterBackend.DB.Entities.StudentEntity", "PassportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VisaCenterBackend.DB.Entities.UserEntity", "User")
                        .WithOne("Student")
                        .HasForeignKey("VisaCenterBackend.DB.Entities.StudentEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VisaCenterBackend.DB.Entities.StudentVisaEntity", "Visa")
                        .WithOne("Student")
                        .HasForeignKey("VisaCenterBackend.DB.Entities.StudentEntity", "VisaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArrivalNotice");

                    b.Navigation("MigrationCard");

                    b.Navigation("Passport");

                    b.Navigation("User");

                    b.Navigation("Visa");
                });

            modelBuilder.Entity("VisaCenterBackend.DB.Entities.StudentVisaRequestEntity", b =>
                {
                    b.HasOne("VisaCenterBackend.DB.Entities.StudentEntity", "Student")
                        .WithMany("VisaRequests")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("VisaCenterBackend.DB.Entities.NotificationEntity", b =>
                {
                    b.Navigation("NotificationToUsers");
                });

            modelBuilder.Entity("VisaCenterBackend.DB.Entities.StudentArrivalNoticeEntity", b =>
                {
                    b.Navigation("Student")
                        .IsRequired();
                });

            modelBuilder.Entity("VisaCenterBackend.DB.Entities.StudentEntity", b =>
                {
                    b.Navigation("CloseRelatives");

                    b.Navigation("VisaRequests");
                });

            modelBuilder.Entity("VisaCenterBackend.DB.Entities.StudentMigrationCardEntity", b =>
                {
                    b.Navigation("Student")
                        .IsRequired();
                });

            modelBuilder.Entity("VisaCenterBackend.DB.Entities.StudentPassportEntity", b =>
                {
                    b.Navigation("Student")
                        .IsRequired();
                });

            modelBuilder.Entity("VisaCenterBackend.DB.Entities.StudentVisaEntity", b =>
                {
                    b.Navigation("Student")
                        .IsRequired();
                });

            modelBuilder.Entity("VisaCenterBackend.DB.Entities.UserEntity", b =>
                {
                    b.Navigation("Employee");

                    b.Navigation("NotificationToUsers");

                    b.Navigation("Student");
                });
#pragma warning restore 612, 618
        }
    }
}

directive @client on FIELD

"""Входные данные для подключения или отключения бота для аккаунта"""
input BotConnectionInput {
  """Тип бота"""
  botType: BotEnum!

  """Идентификатор пользователя"""
  userId: UUID
}

"""Перечисление ботов приложения."""
enum BotEnum {
  Telegram
  Vk
}

type ConfirmationEmailEntityCountAggregate {
  _all: Int!
  code: Int!
  createdAt: Int!
  email: Int!
  id: Int!
  isConfirmed: Int!
  updatedAt: Int!
}

type ConfirmationEmailEntityMaxAggregate {
  code: String
  createdAt: DateTime
  email: EmailAddress
  id: UUID
  isConfirmed: Boolean
  updatedAt: DateTime
}

type ConfirmationEmailEntityMinAggregate {
  code: String
  createdAt: DateTime
  email: EmailAddress
  id: UUID
  isConfirmed: Boolean
  updatedAt: DateTime
}

type ConfirmationPhoneEntityCountAggregate {
  _all: Int!
  code: Int!
  createdAt: Int!
  id: Int!
  isConfirmed: Int!
  phone: Int!
  updatedAt: Int!
}

type ConfirmationPhoneEntityMaxAggregate {
  code: String
  createdAt: DateTime
  id: UUID
  isConfirmed: Boolean
  phone: String
  updatedAt: DateTime
}

type ConfirmationPhoneEntityMinAggregate {
  code: String
  createdAt: DateTime
  id: UUID
  isConfirmed: Boolean
  phone: String
  updatedAt: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress

type EmailAvailabilityResponse {
  message: String!
  verdict: EmailAvailabilityVerdictEnum!
}

"""Вердикт проверки почты на доступность"""
enum EmailAvailabilityVerdictEnum {
  Incorrect
  Occupied
  Ok
}

input EmployeeCreateInput {
  """Электронная почта (должна быть подтверждена)"""
  email: EmailAddress!

  """Имя"""
  firstName: String

  """Является ли админом?"""
  isAdmin: Boolean! = false

  """Фамилия"""
  lastName: String

  """Отчество"""
  patronymic: String
}

"""Сотрудник"""
type EmployeeEntity {
  createdAt: DateTime!

  """Имя"""
  firstName: String
  id: UUID!

  """Является ли админом?"""
  isAdmin: Boolean!

  """Фамилия"""
  lastName: String

  """Отчество"""
  patronymic: String
  updatedAt: DateTime!
  user: UserEntity!

  """Инициалы"""
  initials: String!

  """Полное имя"""
  fullName: String!
}

type EmployeeEntityCountAggregate {
  _all: Int!
  createdAt: Int!
  firstName: Int!
  id: Int!
  isAdmin: Int!
  lastName: Int!
  patronymic: Int!
  updatedAt: Int!
}

type EmployeeEntityMaxAggregate {
  createdAt: DateTime
  firstName: String
  id: UUID
  isAdmin: Boolean
  lastName: String
  patronymic: String
  updatedAt: DateTime
}

type EmployeeEntityMinAggregate {
  createdAt: DateTime
  firstName: String
  id: UUID
  isAdmin: Boolean
  lastName: String
  patronymic: String
  updatedAt: DateTime
}

input EmployeeUpdateInput {
  """Электронная почта (должна быть подтверждена)"""
  email: EmailAddress

  """Имя"""
  firstName: String
  id: UUID!

  """Является ли админом?"""
  isAdmin: Boolean = false

  """Фамилия"""
  lastName: String

  """Отчество"""
  patronymic: String
}

input EmployeeUpsertInput {
  email: EmailAddress
  firstName: String
  isAdmin: Boolean
  lastName: String
  password: String
  patronymic: String
}

"""Файловое хранилище"""
type FileEntity {
  createdAt: DateTime!

  """Время удаления, если файл должен самоуничтожиться"""
  deletedAt: DateTime

  """Описание"""
  description: String

  """Локальная директория внутри хранилища на диске"""
  dir: String

  """Расширение"""
  ext: String

  """Имя файла внутри хранилища"""
  id: UUID!

  """Оригинальное имя"""
  name: String
  updatedAt: DateTime!

  """Пользователь, создавший файл"""
  user: UserEntity

  """Пользователь, создавший файл"""
  userId: UUID
}

type FileEntityCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  description: Int!
  dir: Int!
  ext: Int!
  id: Int!
  name: Int!
  updatedAt: Int!
  userId: Int!
}

type FileEntityMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  dir: String
  ext: String
  id: UUID
  name: String
  updatedAt: DateTime
  userId: UUID
}

type FileEntityMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  dir: String
  ext: String
  id: UUID
  name: String
  updatedAt: DateTime
  userId: UUID
}

type FileEntityResponse {
  createdAt: DateTime!

  """Время удаления, если файл должен самоуничтожиться"""
  deletedAt: DateTime

  """Описание"""
  description: String

  """Локальная директория внутри хранилища на диске"""
  dir: String

  """Расширение"""
  ext: String

  """Имя файла внутри хранилища"""
  id: UUID!

  """Оригинальное имя"""
  name: String
  updatedAt: DateTime!

  """Ссылка на файл"""
  url: String!

  """Пользователь, создавший файл"""
  user: UserEntity

  """Пользователь, создавший файл"""
  userId: UUID
}

"""Пол"""
enum GenderEnum {
  Female
  Male
}

type Mutation {
  botDisconnect(input: BotConnectionInput!): Boolean!

  """Создание сотрудника"""
  createEmployee(input: EmployeeCreateInput!): EmployeeEntity!

  """
  Подтверждение электронной почты кодом. Возвращает true, если почта успешно подтверждена.
  """
  emailConfirmByCode(code: String!, email: EmailAddress!): Boolean!

  """Перезапись сотрудника"""
  employeeUpsert(employeeId: UUID, input: EmployeeUpsertInput!): EmployeeEntity!

  """Удаление сотрудников"""
  employeesDelete(employeeIds: [UUID!]!): Int!

  """Экспорт документов"""
  exportDocuments(studentId: UUID, visaRequestId: UUID): [FileEntityResponse!]!

  """Вход по почте и паролю, возвращает токен доступа и время его истечения"""
  loginByPassword(email: EmailAddress!, password: String!): TokenResponse!

  """
  Удаление уведомлений. При передаче userId и notificationId удаляются указанные уведомления у указанных пользователя. При передаче только userId удалятся ВСЕ уведомления для указанных пользователей. При передаче только notificationId указанные уведомления удалятся сразу у всех пользователей.
  """
  notificationsDelete(notificationIds: [UUID!], userIds: [UUID!]): Boolean!

  """Рассылка уведомлений"""
  notificationsSend(input: NotificationsSendInput!): Boolean!

  """Обновление пары токенов для авторизованного пользователя"""
  refreshTokens: TokenResponse!

  """Регистрация студента. Сначала необходимо подтвердить почту."""
  registration(input: StudentUpsertInput!): Boolean!

  """
  Отправка кода подтверждения почты. Устанавливает RegistrationToken в cookies. Возвращает время до которого необходимо завершить регистрацию.
  """
  sendConfirmationCode(email: EmailAddress!): DateTime!

  """Удаление уведомления о прибытии студента"""
  studentArrivalNoticeDelete(
    """ID Студента"""
    studentId: UUID!
  ): Boolean!

  """Перезапись уведомления о прибытии студента"""
  studentArrivalNoticeUpsert(
    data: StudentArrivalNoticeUpsertInput!

    """ID Студента"""
    studentId: UUID
  ): Boolean!

  """Удалить близкого родственника студента."""
  studentCloseRelativeDelete(
    """ID Родственников"""
    closeRelativeIds: [UUID!]!
  ): Int!

  """Перезапись близкого родственника студента."""
  studentCloseRelativeUpsert(
    """Данные для перезаписи"""
    data: StudentCloseRelativeUpsertInput!
  ): Boolean!

  """Создание/регистрация студента."""
  studentCreate(input: StudentCreateInput!): StudentEntity!

  """Удаление миграционной карты студента"""
  studentMigrationCardDelete(
    """ID Студента"""
    studentId: UUID!
  ): Boolean!

  """Перезапись миграционной карты студента"""
  studentMigrationCardUpsert(
    data: StudentMigrationCardUpsertInput!

    """ID Студента"""
    studentId: UUID
  ): Boolean!

  """Удаление паспорта студента. Студент не может удалить свой паспорт."""
  studentPassportDelete(
    """ID Студента"""
    studentId: UUID!
  ): Boolean!

  """Перезапись паспорта студента."""
  studentPassportUpsert(
    """Данные для перезаписи"""
    data: StudentPassportUpsertInput!

    """ID Студента"""
    studentId: UUID
  ): Boolean!

  """Обновление студента."""
  studentUpdate(input: StudentUpdateInput!): StudentEntity!

  """Перезапись студента."""
  studentUpsert(
    input: StudentUpsertInput!

    """ID студента, если не указан, то будет создан новый студент."""
    studentId: UUID
  ): Boolean!

  """Удаление визы студента"""
  studentVisaDelete(
    """ID Студента"""
    studentId: UUID!
  ): Boolean!

  """Перезапись визы студента"""
  studentVisaUpsert(
    data: StudentVisaUpsertInput!

    """ID Студента"""
    studentId: UUID
  ): Boolean!

  """Удаление студентов."""
  studentsDelete(ids: [UUID!]!): Int!

  """Перезапись сотрудника"""
  updateEmployee(input: EmployeeUpdateInput!): Boolean!

  """Удаление визовых анкет"""
  visaRequestDelete(studentId: UUID, visaRequestId: UUID): StudentVisaRequestEntity!

  """Перезапись визовой анкеты"""
  visaRequestUpsert(input: StudentVisaRequestUpsertInput!, isForceCreate: Boolean, studentId: UUID, visaRequestId: UUID): StudentVisaRequestEntity!
}

"""Уведомление"""
type NotificationEntity {
  _count: NotificationEntityCount!

  """Содержимое"""
  content: String!
  createdAt: DateTime!
  id: UUID!

  """Сервисы для отправки уведомлений"""
  services: [NotificationServiceEnum!]

  """Заголовок"""
  title: String!
  updatedAt: DateTime!

  """Получатели"""
  users: [NotificationToUserEntity!]
}

type NotificationEntityCount {
  users: Int!
}

type NotificationEntityCountAggregate {
  _all: Int!
  content: Int!
  createdAt: Int!
  id: Int!
  services: Int!
  title: Int!
  updatedAt: Int!
}

type NotificationEntityMaxAggregate {
  content: String
  createdAt: DateTime
  id: UUID
  title: String
  updatedAt: DateTime
}

type NotificationEntityMinAggregate {
  content: String
  createdAt: DateTime
  id: UUID
  title: String
  updatedAt: DateTime
}

"""Сервисы для отправки уведомлений"""
enum NotificationServiceEnum {
  Email
  Sms
  Telegram
  Vk
  Web
}

"""Уведомления для пользователей"""
type NotificationToUserEntity {
  createdAt: DateTime!

  """Прочитано ли уведомление?"""
  isRead: Boolean!
  notification: NotificationEntity!
  notificationId: UUID!

  """В какие сервисы отправлено уведомление"""
  sentTo: [NotificationServiceEnum!]
  updatedAt: DateTime!
  user: UserEntity!
  userId: UUID!
}

type NotificationToUserEntityCountAggregate {
  _all: Int!
  createdAt: Int!
  isRead: Int!
  notificationId: Int!
  sentTo: Int!
  updatedAt: Int!
  userId: Int!
}

type NotificationToUserEntityMaxAggregate {
  createdAt: DateTime
  isRead: Boolean
  notificationId: UUID
  updatedAt: DateTime
  userId: UUID
}

type NotificationToUserEntityMinAggregate {
  createdAt: DateTime
  isRead: Boolean
  notificationId: UUID
  updatedAt: DateTime
  userId: UUID
}

"""Ответ на запрос уведомлений пользователя"""
type NotificationsResponse {
  """Уведомления"""
  notifications: [UserNotificationNoContentObject!]!

  """Общее количество уведомлений"""
  totalCount: Float!

  """Количество непрочитанных уведомлений"""
  unreadCount: Float!
}

input NotificationsSendInput {
  """Всем сотрудникам"""
  allEmployees: Boolean

  """Всем студентам"""
  allStudents: Boolean

  """Текст уведомления"""
  content: String!

  """Сервисы для рассылки (по умолчанию все)"""
  services: [NotificationServiceEnum!]

  """Заголовок уведомления"""
  title: String!

  """Получатели"""
  userIds: [UUID!]
}

"""Входные данные для пагинации"""
input PaginationInput {
  skip: Float
  take: Float
}

type Query {
  botConnectionLink(input: BotConnectionInput!): String!

  """Проверка почты на корректность и доступность"""
  emailAvailability(email: String!): EmailAvailabilityResponse!

  """
  Получение сотрудника. Если не передан идентификатор сотрудника, то возвращает текущего. Только админ может получить других сотрудников.
  """
  employee(employeeId: UUID): EmployeeEntity!

  """Выборка всех сотрудников"""
  employees: [EmployeeEntity!]!

  """Получение уведомления. Помечает уведомление как прочитанное."""
  notification(notificationId: UUID!, userId: UUID): UserNotificationObject!

  """Получение уведомлений пользователя"""
  notifications(pagination: PaginationInput, userId: UUID): NotificationsResponse!

  """Получение студента по id."""
  student(
    """ID студента"""
    studentId: UUID
  ): StudentEntity!

  """Получение уведомления о прибытии студента"""
  studentArrivalNotice(
    """ID Студента"""
    studentId: UUID
  ): StudentArrivalNoticeWithoutStudentResult

  """Получить близкого родственника студента."""
  studentCloseRelative(
    """ID Близкого родственника"""
    closeRelativeId: UUID!
  ): StudentCloseRelativeWithoutStudentResult!

  """Получить близких родственников студента."""
  studentCloseRelatives(
    """ID Студента"""
    studentId: UUID
  ): [StudentCloseRelativeWithoutStudentResult!]!

  """Получение миграционной карты студента"""
  studentMigrationCard(
    """ID Студента"""
    studentId: UUID
  ): StudentMigrationCardWithoutStudentResponse

  """Получить паспорт студента."""
  studentPassport(
    """ID Студента"""
    studentId: UUID
  ): StudentPassportWithoutStudentResult

  """Получение визы студента"""
  studentVisa(
    """ID Студента"""
    studentId: UUID
  ): StudentVisaWithoutStudentResponse

  """Получение списка студентов."""
  students: [StudentEntity!]!

  """Получить текущего пользователя"""
  userCurrent: UserCurrentResponse!

  """Получение последней визовой анкеты"""
  visaRequest(studentId: UUID, visaRequestId: UUID): StudentVisaRequestEntity

  """Получение визовых анкет всех или одного студента."""
  visaRequests(studentId: UUID): [StudentVisaRequestEntity!]!
}

"""Уведомление о прибытии студента"""
type StudentArrivalNoticeEntity {
  """Адрес регистрации"""
  address: String
  createdAt: DateTime!

  """Дата регистрации"""
  date: DateTime

  """Дата окончания регистрации"""
  expires: DateTime
  id: UUID!

  """Приглашающая сторона"""
  invitingSide: String

  """Профессия. Заполняется только сотрудниками."""
  profession: String

  """Принимающая сторона"""
  receivingSide: String
  student: StudentEntity!
  studentId: UUID!
  updatedAt: DateTime!
}

type StudentArrivalNoticeEntityCountAggregate {
  _all: Int!
  address: Int!
  createdAt: Int!
  date: Int!
  expires: Int!
  id: Int!
  invitingSide: Int!
  profession: Int!
  receivingSide: Int!
  studentId: Int!
  updatedAt: Int!
}

type StudentArrivalNoticeEntityMaxAggregate {
  address: String
  createdAt: DateTime
  date: DateTime
  expires: DateTime
  id: UUID
  invitingSide: String
  profession: String
  receivingSide: String
  studentId: UUID
  updatedAt: DateTime
}

type StudentArrivalNoticeEntityMinAggregate {
  address: String
  createdAt: DateTime
  date: DateTime
  expires: DateTime
  id: UUID
  invitingSide: String
  profession: String
  receivingSide: String
  studentId: UUID
  updatedAt: DateTime
}

"""Входные данные для создания/обновления уведомления о прибытии студента"""
input StudentArrivalNoticeUpsertInput {
  address: String
  date: DateTime
  expires: DateTime
  invitingSide: String
  profession: String
  receivingSide: String
}

"""Уведомление о прибытии студента без возможности выбора самого студента"""
type StudentArrivalNoticeWithoutStudentResult {
  """Адрес регистрации"""
  address: String
  createdAt: DateTime!

  """Дата регистрации"""
  date: DateTime

  """Дата окончания регистрации"""
  expires: DateTime
  id: UUID!

  """Приглашающая сторона"""
  invitingSide: String

  """Профессия. Заполняется только сотрудниками."""
  profession: String

  """Принимающая сторона"""
  receivingSide: String
  studentId: UUID!
  updatedAt: DateTime!
}

"""Близкие родственники студента"""
type StudentCloseRelativeEntity {
  """Постоянное место жительства"""
  addressContinuousResidence: String

  """Дата рождения"""
  birthDate: DateTime

  """Гражданство"""
  citizenship: String
  createdAt: DateTime!

  """Имя"""
  firstName: String
  id: UUID!

  """Фамилия"""
  lastName: String

  """Отчество"""
  patronymic: String
  student: StudentEntity!
  studentId: UUID!
  updatedAt: DateTime!
}

type StudentCloseRelativeEntityCountAggregate {
  _all: Int!
  addressContinuousResidence: Int!
  birthDate: Int!
  citizenship: Int!
  createdAt: Int!
  firstName: Int!
  id: Int!
  lastName: Int!
  patronymic: Int!
  studentId: Int!
  updatedAt: Int!
}

type StudentCloseRelativeEntityMaxAggregate {
  addressContinuousResidence: String
  birthDate: DateTime
  citizenship: String
  createdAt: DateTime
  firstName: String
  id: UUID
  lastName: String
  patronymic: String
  studentId: UUID
  updatedAt: DateTime
}

type StudentCloseRelativeEntityMinAggregate {
  addressContinuousResidence: String
  birthDate: DateTime
  citizenship: String
  createdAt: DateTime
  firstName: String
  id: UUID
  lastName: String
  patronymic: String
  studentId: UUID
  updatedAt: DateTime
}

input StudentCloseRelativeUpsertInput {
  addressContinuousResidence: String
  birthDate: DateTime
  citizenship: String
  firstName: String
  id: UUID
  lastName: String
  patronymic: String
  studentId: UUID
}

"""Близкий родственник студента без возможности выбора самого студента"""
type StudentCloseRelativeWithoutStudentResult {
  """Постоянное место жительства"""
  addressContinuousResidence: String

  """Дата рождения"""
  birthDate: DateTime

  """Гражданство"""
  citizenship: String
  createdAt: DateTime!

  """Имя"""
  firstName: String
  id: UUID!

  """Фамилия"""
  lastName: String

  """Отчество"""
  patronymic: String
  studentId: UUID!
  updatedAt: DateTime!
}

input StudentCreateInput {
  course: Int
  curator: String
  email: EmailAddress!
  faculty: String
  firstName: String
  group: String
  lastName: String
  password: String!
  patronymic: String
  phone: String
}

"""Студент"""
type StudentEntity {
  _count: StudentEntityCount!

  """Уведомление о прибытии"""
  arrivalNotice: StudentArrivalNoticeEntity

  """Близкие родственники"""
  closeRelatives: [StudentCloseRelativeEntity!]

  """Курс"""
  course: Int
  createdAt: DateTime!

  """Куратор"""
  curator: String

  """Факультет"""
  faculty: String

  """Группа"""
  group: String
  id: UUID!

  """Миграционная карта"""
  migrationCard: StudentMigrationCardEntity

  """Паспорт"""
  passport: StudentPassportEntity

  """Телефон"""
  phone: String
  updatedAt: DateTime!
  user: UserEntity!

  """Виза"""
  visa: StudentVisaEntity

  """Визовые анкеты"""
  visaRequests: [StudentVisaRequestEntity!]

  """
  Инициалы. Использовать только если в запросе присутствует паспорт студента.
  """
  initials: String!

  """
  Полное имя. Использовать только если в запросе присутствует паспорт студента.
  """
  fullName: String!
}

type StudentEntityAvgAggregate {
  course: Float
}

type StudentEntityCount {
  closeRelatives: Int!
  visaRequests: Int!
}

type StudentEntityCountAggregate {
  _all: Int!
  course: Int!
  createdAt: Int!
  curator: Int!
  faculty: Int!
  group: Int!
  id: Int!
  phone: Int!
  updatedAt: Int!
}

type StudentEntityMaxAggregate {
  course: Int
  createdAt: DateTime
  curator: String
  faculty: String
  group: String
  id: UUID
  phone: String
  updatedAt: DateTime
}

type StudentEntityMinAggregate {
  course: Int
  createdAt: DateTime
  curator: String
  faculty: String
  group: String
  id: UUID
  phone: String
  updatedAt: DateTime
}

type StudentEntitySumAggregate {
  course: Int
}

"""Миграционная карта студента"""
type StudentMigrationCardEntity {
  createdAt: DateTime!

  """Дата истечения"""
  expirationDate: DateTime
  id: UUID!

  """Дата выдачи"""
  issueDate: DateTime

  """Номер"""
  number: String

  """Серия"""
  series: String
  student: StudentEntity!
  studentId: UUID!
  updatedAt: DateTime!
}

type StudentMigrationCardEntityCountAggregate {
  _all: Int!
  createdAt: Int!
  expirationDate: Int!
  id: Int!
  issueDate: Int!
  number: Int!
  series: Int!
  studentId: Int!
  updatedAt: Int!
}

type StudentMigrationCardEntityMaxAggregate {
  createdAt: DateTime
  expirationDate: DateTime
  id: UUID
  issueDate: DateTime
  number: String
  series: String
  studentId: UUID
  updatedAt: DateTime
}

type StudentMigrationCardEntityMinAggregate {
  createdAt: DateTime
  expirationDate: DateTime
  id: UUID
  issueDate: DateTime
  number: String
  series: String
  studentId: UUID
  updatedAt: DateTime
}

"""Входные данные для создания/обновления миграционной карты студента"""
input StudentMigrationCardUpsertInput {
  expirationDate: DateTime
  issueDate: DateTime
  number: String
  series: String
}

"""Миграционная карта студента без возможности выбора самого студента"""
type StudentMigrationCardWithoutStudentResponse {
  createdAt: DateTime!

  """Дата истечения"""
  expirationDate: DateTime
  id: UUID!

  """Дата выдачи"""
  issueDate: DateTime

  """Номер"""
  number: String

  """Серия"""
  series: String
  studentId: UUID!
  updatedAt: DateTime!
}

"""Паспорт студента"""
type StudentPassportEntity {
  """Дата рождения"""
  birthDate: DateTime

  """Место рождения"""
  birthPlace: String

  """Гражданство"""
  citizenship: String
  createdAt: DateTime!

  """Дата истечения"""
  expirationDate: DateTime

  """Имя"""
  firstName: String

  """Пол"""
  gender: GenderEnum
  id: UUID!

  """Дата выдачи"""
  issueDate: DateTime

  """Кем выдан"""
  issuedBy: String

  """Фамилия"""
  lastName: String

  """Номер"""
  number: String

  """Отчество"""
  patronymic: String

  """Серия"""
  series: String
  student: StudentEntity!
  studentId: UUID!
  updatedAt: DateTime!
}

type StudentPassportEntityCountAggregate {
  _all: Int!
  birthDate: Int!
  birthPlace: Int!
  citizenship: Int!
  createdAt: Int!
  expirationDate: Int!
  firstName: Int!
  gender: Int!
  id: Int!
  issueDate: Int!
  issuedBy: Int!
  lastName: Int!
  number: Int!
  patronymic: Int!
  series: Int!
  studentId: Int!
  updatedAt: Int!
}

type StudentPassportEntityMaxAggregate {
  birthDate: DateTime
  birthPlace: String
  citizenship: String
  createdAt: DateTime
  expirationDate: DateTime
  firstName: String
  gender: GenderEnum
  id: UUID
  issueDate: DateTime
  issuedBy: String
  lastName: String
  number: String
  patronymic: String
  series: String
  studentId: UUID
  updatedAt: DateTime
}

type StudentPassportEntityMinAggregate {
  birthDate: DateTime
  birthPlace: String
  citizenship: String
  createdAt: DateTime
  expirationDate: DateTime
  firstName: String
  gender: GenderEnum
  id: UUID
  issueDate: DateTime
  issuedBy: String
  lastName: String
  number: String
  patronymic: String
  series: String
  studentId: UUID
  updatedAt: DateTime
}

"""Входные данные для создания/обновления паспорта студента"""
input StudentPassportUpsertInput {
  birthDate: DateTime
  birthPlace: String
  citizenship: String
  expirationDate: DateTime
  firstName: String
  gender: GenderEnum
  issueDate: DateTime
  issuedBy: String
  lastName: String
  number: String
  patronymic: String
  series: String
}

"""
Паспорт студента, где вместо студента присутствует только его studentId.
"""
type StudentPassportWithoutStudentResult {
  """Дата рождения"""
  birthDate: DateTime

  """Место рождения"""
  birthPlace: String

  """Гражданство"""
  citizenship: String
  createdAt: DateTime!

  """Дата истечения"""
  expirationDate: DateTime

  """Имя"""
  firstName: String

  """Пол"""
  gender: GenderEnum
  id: UUID!

  """Дата выдачи"""
  issueDate: DateTime

  """Кем выдан"""
  issuedBy: String

  """Фамилия"""
  lastName: String

  """Номер"""
  number: String

  """Отчество"""
  patronymic: String

  """Серия"""
  series: String
  studentId: UUID!
  updatedAt: DateTime!
}

input StudentUpdateInput {
  course: Int
  curator: String
  email: EmailAddress
  faculty: String
  firstName: String
  group: String

  """Идентификатор пользователя"""
  id: UUID!
  lastName: String
  password: String
  patronymic: String
  phone: String
}

input StudentUpsertInput {
  course: Int
  curator: String
  email: EmailAddress
  faculty: String
  firstName: String
  group: String
  lastName: String
  password: String
  patronymic: String
  phone: String
}

"""Виза студента"""
type StudentVisaEntity {
  """Серия бланка"""
  blankSeries: String
  createdAt: DateTime!

  """Дата истечения"""
  expirationDate: DateTime

  """Идентификатор визы"""
  id: ID!

  """Номер приглашения"""
  invitationNumber: String

  """Дата выдачи"""
  issueDate: DateTime

  """Номер"""
  number: String
  student: StudentEntity!
  studentId: UUID!
  updatedAt: DateTime!
}

type StudentVisaEntityCountAggregate {
  _all: Int!
  blankSeries: Int!
  createdAt: Int!
  expirationDate: Int!
  id: Int!
  invitationNumber: Int!
  issueDate: Int!
  number: Int!
  studentId: Int!
  updatedAt: Int!
}

type StudentVisaEntityMaxAggregate {
  blankSeries: String
  createdAt: DateTime
  expirationDate: DateTime
  id: String
  invitationNumber: String
  issueDate: DateTime
  number: String
  studentId: UUID
  updatedAt: DateTime
}

type StudentVisaEntityMinAggregate {
  blankSeries: String
  createdAt: DateTime
  expirationDate: DateTime
  id: String
  invitationNumber: String
  issueDate: DateTime
  number: String
  studentId: UUID
  updatedAt: DateTime
}

"""Визовая анкета студента"""
type StudentVisaRequestEntity {
  """Адрес в стране постоянного проживания"""
  addressInCountryOfContinuousResidence: String

  """Адрес постановки на миграционный учет"""
  addressOfMigrationRegistration: String

  """Прилагаемые документы"""
  attachedDocuments: String

  """Категория визы"""
  category: VisaCategoryEnum
  createdAt: DateTime!

  """Комментарий сотрудника"""
  employeeComment: String

  """Маршрут предполагаемого пребывания"""
  estimatedRouteOfStay: String
  id: UUID!

  """Кратность визы"""
  multiplicity: VisaMultiplicityEnum

  """Место работы или учёбы, должность"""
  placeOfWorkOrStudyAndEmploymentPosition: String

  """В связи с ..."""
  reason: String

  """Регистрационный номер заполняемый только сотрудником"""
  registrationNumber: String

  """Родственники на территории РФ"""
  russianFederationRelatives: String

  """Статус визовой анкеты"""
  status: VisaRequestStatusEnum!
  student: StudentEntity!
  studentId: UUID!
  updatedAt: DateTime!
}

type StudentVisaRequestEntityCountAggregate {
  _all: Int!
  addressInCountryOfContinuousResidence: Int!
  addressOfMigrationRegistration: Int!
  attachedDocuments: Int!
  category: Int!
  createdAt: Int!
  employeeComment: Int!
  estimatedRouteOfStay: Int!
  id: Int!
  multiplicity: Int!
  placeOfWorkOrStudyAndEmploymentPosition: Int!
  reason: Int!
  registrationNumber: Int!
  russianFederationRelatives: Int!
  status: Int!
  studentId: Int!
  updatedAt: Int!
}

type StudentVisaRequestEntityMaxAggregate {
  addressInCountryOfContinuousResidence: String
  addressOfMigrationRegistration: String
  attachedDocuments: String
  category: VisaCategoryEnum
  createdAt: DateTime
  employeeComment: String
  estimatedRouteOfStay: String
  id: UUID
  multiplicity: VisaMultiplicityEnum
  placeOfWorkOrStudyAndEmploymentPosition: String
  reason: String
  registrationNumber: String
  russianFederationRelatives: String
  status: VisaRequestStatusEnum
  studentId: UUID
  updatedAt: DateTime
}

type StudentVisaRequestEntityMinAggregate {
  addressInCountryOfContinuousResidence: String
  addressOfMigrationRegistration: String
  attachedDocuments: String
  category: VisaCategoryEnum
  createdAt: DateTime
  employeeComment: String
  estimatedRouteOfStay: String
  id: UUID
  multiplicity: VisaMultiplicityEnum
  placeOfWorkOrStudyAndEmploymentPosition: String
  reason: String
  registrationNumber: String
  russianFederationRelatives: String
  status: VisaRequestStatusEnum
  studentId: UUID
  updatedAt: DateTime
}

input StudentVisaRequestUpsertInput {
  addressInCountryOfContinuousResidence: String
  addressOfMigrationRegistration: String
  attachedDocuments: String
  category: VisaCategoryEnum
  employeeComment: String
  estimatedRouteOfStay: String
  multiplicity: VisaMultiplicityEnum
  placeOfWorkOrStudyAndEmploymentPosition: String
  reason: String
  registrationNumber: String
  russianFederationRelatives: String
  status: VisaRequestStatusEnum
}

"""Входные данные для создания/обновления визы студента"""
input StudentVisaUpsertInput {
  blankSeries: String
  expirationDate: DateTime
  id: String!
  invitationNumber: String
  issueDate: DateTime
  number: String
}

"""Виза студента без возможности выбора самого студента"""
type StudentVisaWithoutStudentResponse {
  """Серия бланка"""
  blankSeries: String
  createdAt: DateTime!

  """Дата истечения"""
  expirationDate: DateTime

  """Идентификатор визы"""
  id: ID!

  """Номер приглашения"""
  invitationNumber: String

  """Дата выдачи"""
  issueDate: DateTime

  """Номер"""
  number: String
  studentId: UUID!
  updatedAt: DateTime!
}

type Subscription {
  botConnected: BotEnum!

  """Подписка на уведомления"""
  notificationSubscription: UserNotificationNoContentObject!
}

"""Ответ на запрос токена"""
type TokenResponse {
  """Токен доступа"""
  accessToken: String!

  """Время истечения токена"""
  accessTokenExpires: DateTime!
}

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar UUID

type UserCurrentResponse {
  """Дата истечения токена доступа"""
  accessTokenExpires: DateTime!

  """Роли текущего пользователя"""
  roles: [UserRoleEnum!]!

  """Текущий пользователь"""
  user: UserEntity!

  """
  Роль пользователя. Использовать, только если в запросе присутствует roles.
  """
  role: UserRoleEnum!
}

"""Пользователь"""
type UserEntity {
  _count: UserEntityCount!
  createdAt: DateTime!

  """Электронная почта (должна быть подтверждена)"""
  email: EmailAddress!

  """Если пользователь - сотрудник"""
  employee: EmployeeEntity

  """Файлы созданные пользователем"""
  files: [FileEntity!]

  """Идентификатор пользователя"""
  id: UUID!

  """Последняя активность"""
  lastActivity: DateTime

  """Уведомления пользователя"""
  notifications: [NotificationToUserEntity!]

  """Если пользователь - студент"""
  student: StudentEntity

  """Telegram User ID"""
  telegramId: String
  updatedAt: DateTime!

  """VK User ID"""
  vkId: String

  """
  Инициалы. Использовать только если в запросе присутствуют поля паспорта студента или поля сотрудника.
  """
  initials: String!

  """
  Полное имя. Использовать только если в запросе присутствуют поля паспорта студента или поля сотрудника.
  """
  fullName: String!

  """
  Роль. Использовать только если в запросе присутствует student или employee.isAdmin.
  """
  role: UserRoleEnum!
}

type UserEntityCount {
  files: Int!
  notifications: Int!
}

type UserEntityCountAggregate {
  _all: Int!
  createdAt: Int!
  email: Int!
  id: Int!
  lastActivity: Int!
  telegramId: Int!
  updatedAt: Int!
  vkId: Int!
}

type UserEntityMaxAggregate {
  createdAt: DateTime
  email: EmailAddress
  id: UUID
  lastActivity: DateTime
  telegramId: String
  updatedAt: DateTime
  vkId: String
}

type UserEntityMinAggregate {
  createdAt: DateTime
  email: EmailAddress
  id: UUID
  lastActivity: DateTime
  telegramId: String
  updatedAt: DateTime
  vkId: String
}

"""Уведомление пользователя без контента"""
type UserNotificationNoContentObject {
  createdAt: DateTime!
  id: UUID!

  """Прочитано ли уведомление?"""
  isRead: Boolean!

  """В какие сервисы отправлено уведомление"""
  sentTo: [NotificationServiceEnum!]

  """Заголовок"""
  title: String!
  userId: UUID!
}

"""Уведомление пользователя"""
type UserNotificationObject {
  """Содержимое"""
  content: String!
  createdAt: DateTime!
  id: UUID!

  """Прочитано ли уведомление?"""
  isRead: Boolean!

  """В какие сервисы отправлено уведомление"""
  sentTo: [NotificationServiceEnum!]

  """Сервисы для отправки уведомлений"""
  services: [NotificationServiceEnum!]

  """Заголовок"""
  title: String!
  userId: UUID!
}

"""Роли пользователя"""
enum UserRoleEnum {
  Admin
  Any
  Employee
  Student
}

"""Требуемая категория визы в визовой анкете"""
enum VisaCategoryEnum {
  RegularBusiness
  RegularGroupTravel
  RegularHumanitarian
  RegularNationalEntry
  RegularPrivate
  RegularStudy
  RegularTourist
  RegularWorking
  TemporaryResident
  Transit
}

"""Требуемая кратность визы в визовой анкете"""
enum VisaMultiplicityEnum {
  Double
  Multiple
  Single
}

"""Статус анкеты на визу"""
enum VisaRequestStatusEnum {
  Finished
  Pending
  PendingCorrectionsByStudent
  Verified
}
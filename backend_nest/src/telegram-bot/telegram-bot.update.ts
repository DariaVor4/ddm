import {
  Ctx, Help, Start, Update,
} from 'nestjs-telegraf';
import { InternalServerErrorException } from '@nestjs/common';
import { compact, isError, isString } from 'lodash';
import { PublicEndpoint } from '../api/auth/decorators/public.decorator';
import { Roles } from '../api/auth/decorators/roles.decorator';
import UserRoleEnum from '../api/auth/interfaces/user-role.enum';
import { TelegrafAppContext } from './telegraf-app-context';
import { TelegramBotService } from './telegram-bot.service';
import { PrismaService } from '../prisma/prisma.service';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π Telegram –±–æ—Ç–∞.
 */
@Roles(UserRoleEnum.Any)
@PublicEndpoint()
@Update()
export class TelegramBotUpdate {
  constructor(
    private readonly telegramBotService: TelegramBotService,
    private readonly prisma: PrismaService,
  ) {}

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
   * –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ ref-—Å—Å—ã–ª–∫–µ, —Ç–æ telegram-–∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–µ–±-–∞–∫–∫–∞—É–Ω—Ç—É.
   * @param ctx –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.
   */
  @Start()
  async start(@Ctx() ctx: TelegrafAppContext) {
    if (!ctx.from?.id) {
      throw new InternalServerErrorException('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    const userId = ctx.state.userId || (ctx.startPayload
      ? await this.telegramBotService.connectUser(ctx.startPayload, ctx.from.id).catch((error: Error) => error)
      : undefined);
    const isErr = isError(userId);
    const selectFio = { select: { lastName: true, firstName: true, patronymic: true } };
    const fio = isString(userId)
      ? await this.prisma.userEntity.findFirstOrThrow({
        where: { id: userId },
        select: { employee: selectFio, student: { select: { passport: selectFio } } },
      }).then((user) => compact([
        user.student?.passport?.lastName || user.employee?.lastName,
        user.student?.passport?.firstName || user.employee?.firstName,
        user.student?.passport?.patronymic || user.employee?.patronymic,
      ]).join(' ') || '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
      : undefined;
    await ctx.reply(compact([
      'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram –±–æ—Ç–∞ –í–∏–∑–æ–≤–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –ø—Ä–∏ –í–æ–ª–≥–ì–¢–£!',
      isErr ? `‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞ –∫ –≤–µ–±-–∞–∫–∫–∞—É–Ω—Ç—É: ¬´${userId.message}¬ª` : undefined,
      isString(userId)
        ? [`‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –∫–∞–∫ ${fio}.`, 'ü§ì –ó–¥–µ—Å—å –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.']
        : '‚ö† –í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–≤–æ–µ–º—É –≤–µ–±-–∞–∫–∫–∞—É–Ω—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Å–∞–π—Ç–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞.',
    ]).flat().join('\n\n'));
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.
   * @param ctx –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.
   */
  @Help()
  async help(@Ctx() ctx: TelegrafAppContext) {
    await ctx.reply('–£ –º–µ–Ω—è –Ω–µ—Ç –∫–æ–º–∞–Ω–¥, –Ω–æ —è –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –í–∞–º –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è.');
  }
}

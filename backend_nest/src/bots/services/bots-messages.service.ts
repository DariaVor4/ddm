import { Injectable, InternalServerErrorException } from '@nestjs/common';
import { compact, isError, isString } from 'lodash';
import { BotsCommonService } from './bots-common.service';
import { PrismaService } from '../../prisma/prisma.service';

@Injectable()
export class BotsMessagesService {
  constructor(
    private readonly prisma: PrismaService,
    private readonly botsCommonService: BotsCommonService,
  ) {}

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –∫ –≤–µ–±-–∞–∫–∫–∞—É–Ω—Ç—É –∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –±–æ—Ç–æ–º.
   * @param ref –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
   * @param externalUserId –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤–Ω–µ—à–Ω–µ–π —Å–∏—Å—Ç–µ–º–µ.
   * @param internalUserId –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–∏—Å—Ç–µ–º–µ.
   */
  public async getStartMessage(ref?: string, externalUserId?: string, internalUserId?: string) {
    // Check external user id.
    if (!externalUserId) {
      throw new InternalServerErrorException('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    // Try to connect user and get internal user id.
    const userId = internalUserId || (ref
      ? await this.botsCommonService.connect(ref, externalUserId).catch((error: Error) => error)
      : undefined);
    // Get user info.
    const isErr = isError(userId);
    const selectFio = { select: { lastName: true, firstName: true, patronymic: true } };
    const fio = isString(userId)
      ? await this.prisma.userEntity.findFirstOrThrow({
        where: { id: userId },
        select: { employee: selectFio, student: { select: { passport: selectFio } } },
      }).then((user) => compact([
        user.student?.passport?.lastName || user.employee?.lastName,
        user.student?.passport?.firstName || user.employee?.firstName,
        user.student?.passport?.patronymic || user.employee?.patronymic,
      ]).join(' ') || '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
      : undefined;
    // Return message.
    return compact([
      'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –í–∏–∑–æ–≤–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –ø—Ä–∏ –í–æ–ª–≥–ì–¢–£!',
      isErr ? `‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞ –∫ –≤–µ–±-–∞–∫–∫–∞—É–Ω—Ç—É: ¬´${userId.message}¬ª` : undefined, // TODO!: –û–ø–∞—Å–Ω–∞—è —Å—Ç—Ä–æ—á–∫–∞, –º–æ–∂–µ—Ç –≤—ã–¥–∞—Ç—å —é–∑–µ—Ä—É –≤—Å—ë —á—Ç–æ —É–≥–æ–¥–Ω–æ.
      !isErr && userId
        ? [`‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –∫–∞–∫ ${fio}!`, 'ü§ì –ó–¥–µ—Å—å —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –í–∞–º –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.']
        : '‚ö† –í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–≤–æ–µ–º—É –≤–µ–±-–∞–∫–∫–∞—É–Ω—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Å–∞–π—Ç–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞.',
    ]).flat().join('\n\n');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help.
   */
  public getHelpMessage() {
    return 'üôå –£ –º–µ–Ω—è –Ω–µ—Ç –∫–æ–º–∞–Ω–¥, –Ω–æ —è –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –í–∞–º –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è.';
  }
}

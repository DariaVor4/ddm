generator client {
  provider        = "prisma-client-js"
  // output          = "client"
  previewFeatures = ["postgresqlExtensions"]
}

generator nestgraphql {
  provider             = "node node_modules/prisma-nestjs-graphql"
  // provider = "prisma-nestjs-graphql"
  output               = "../src/generated/prisma-nestjs-graphql"
  reExport             = All
  combineScalarFilters = true
  noAtomicOperations   = true
  purgeOutput          = true
  emitSingle           = true

  fields_Scalars_from   = "graphql-scalars"
  fields_Scalars_input  = true
  fields_Scalars_output = true
}

datasource db {
  provider   = "postgresql"
  url        = env("VISCEN_DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

enum UserRoleEnum {
  Admin
  Employee
  Student
}

/// Файловое хранилище
model FileEntity {
  /// Имя файла внутри хранилища
  /// @FieldType('Scalars.GraphQLUUID')
  id     String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  /// Пользователь, создавший файл
  /// @HideField({ input: true, output: false })
  user   UserEntity? @relation(fields: [userId], references: [id], onDelete: SetNull)
  /// Пользователь, создавший файл
  /// @FieldType('Scalars.GraphQLUUID')
  userId String?     @db.Uuid

  /// Локальная директория внутри хранилища на диске
  dir  String?
  /// Оригинальное имя
  name String?
  /// Расширение
  ext  String?

  /// Описание
  description String?
  /// Время удаления, если файл должен самоуничтожиться
  /// @HideField({ input: true, output: false })
  deletedAt   DateTime? @db.Timestamptz

  // Служебные поля
  /// @HideField({ input: true, output: false })
  createdAt DateTime @default(now()) @db.Timestamptz
  /// @HideField({ input: true, output: false })
  updatedAt DateTime @updatedAt @db.Timestamptz
}

/// Подтверждение почтового адреса
model ConfirmationEmailEntity {
  /// @FieldType('Scalars.GraphQLUUID')
  id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid

  /// @FieldType('Scalars.GraphQLEmailAddress')
  email       String
  code        String
  isConfirmed Boolean @default(false)

  // Служебные поля
  /// @HideField({ input: true, output: false })
  createdAt DateTime @default(now()) @db.Timestamptz
  /// @HideField({ input: true, output: false })
  updatedAt DateTime @updatedAt @db.Timestamptz
}

/// Подтверждение номера телефона
model ConfirmationPhoneEntity {
  /// @FieldType('Scalars.GraphQLUUID')
  id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid

  phone       String
  code        String
  isConfirmed Boolean @default(false)

  // Служебные поля
  /// @HideField({ input: true, output: false })
  createdAt DateTime @default(now()) @db.Timestamptz
  /// @HideField({ input: true, output: false })
  updatedAt DateTime @updatedAt @db.Timestamptz
}

/// Пользователь
model UserEntity {
  /// Идентификатор пользователя
  /// @FieldType('Scalars.GraphQLUUID')
  id            String                     @id() @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  /// Электронная почта (должна быть подтверждена)
  /// @FieldType('Scalars.GraphQLEmailAddress')
  email         String                     @unique
  /// Bcrypt хэш пароля
  /// @HideField({ input: false, output: true })
  password      String
  /// Авторизован ли сейчас пользователь?
  /// @HideField({ input: true, output: true })
  tokenHash     String?
  /// Последняя активность
  /// @HideField({ input: true, output: false })
  lastActivity  DateTime?                  @db.Timestamptz
  /// Если пользователь - сотрудник
  /// @HideField({ input: true, output: false })
  employee      EmployeeEntity?
  /// Если пользователь - студент
  /// @HideField({ input: true, output: false })
  student       StudentEntity?
  /// Уведомления пользователя
  /// @HideField({ input: true, output: false })
  notifications NotificationToUserEntity[]
  /// Файлы созданные пользователем
  /// @HideField({ input: true, output: false })
  files         FileEntity[]
  /// Telegram User ID
  telegramId    String?                    @unique
  /// VK User ID
  vkId          String?                    @unique

  // Служебные поля
  /// @HideField({ input: true, output: false })
  createdAt DateTime @default(now()) @db.Timestamptz
  /// @HideField({ input: true, output: false })
  updatedAt DateTime @updatedAt @db.Timestamptz
}

/// Сотрудник
model EmployeeEntity {
  /// @HideField({ input: true, output: false })
  user UserEntity @relation(fields: [id], references: [id], onDelete: Cascade)
  /// @FieldType('Scalars.GraphQLUUID')
  id   String     @id() @unique @db.Uuid

  /// Фамилия
  lastName   String?
  /// Имя
  firstName  String?
  /// Отчество
  patronymic String?
  /// Является ли админом?
  isAdmin    Boolean @default(false)

  // Служебные поля
  /// @HideField({ input: true, output: false })
  createdAt DateTime @default(now()) @db.Timestamptz
  /// @HideField({ input: true, output: false })
  updatedAt DateTime @updatedAt @db.Timestamptz
}

/// Сервисы для отправки уведомлений
enum NotificationServiceEnum {
  /// Онлайн
  Web
  /// Почта
  Email
  /// СМС
  Sms
  /// Бот ВКонтакте
  Vk
  /// Бот Телеграм
  Telegram
}

/// Уведомление
model NotificationEntity {
  /// @FieldType('Scalars.GraphQLUUID')
  id       String                     @id() @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  /// Заголовок
  title    String
  /// Содержимое
  content  String
  /// Получатели
  users    NotificationToUserEntity[]
  /// Сервисы для отправки уведомлений
  services NotificationServiceEnum[]

  // Служебные поля
  /// @HideField({ input: true, output: false })
  createdAt DateTime @default(now()) @db.Timestamptz
  /// @HideField({ input: true, output: false })
  updatedAt DateTime @updatedAt @db.Timestamptz
}

/// Уведомления для пользователей
model NotificationToUserEntity {
  notification   NotificationEntity @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  /// @FieldType('Scalars.GraphQLUUID')
  notificationId String             @db.Uuid

  /// @HideField({ input: true, output: false })
  user   UserEntity @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// @FieldType('Scalars.GraphQLUUID')
  userId String     @db.Uuid

  /// В какие сервисы отправлено уведомление
  sentTo NotificationServiceEnum[]
  /// Прочитано ли уведомление?
  isRead Boolean                   @default(false)

  // Служебные поля
  /// @HideField({ input: true, output: false })
  createdAt DateTime @default(now()) @db.Timestamptz
  /// @HideField({ input: true, output: false })
  updatedAt DateTime @updatedAt @db.Timestamptz

  @@id([userId, notificationId])
}

/// Студент
model StudentEntity {
  /// @HideField({ input: true, output: false })
  user UserEntity @relation(fields: [id], references: [id], onDelete: Cascade)
  /// @FieldType('Scalars.GraphQLUUID')
  id   String     @id() @unique @db.Uuid

  /// Уведомление о прибытии
  /// @HideField({ input: true, output: false })
  arrivalNotice StudentArrivalNoticeEntity?
  /// Миграционная карта
  /// @HideField({ input: true, output: false })
  migrationCard StudentMigrationCardEntity?
  /// Виза
  /// @HideField({ input: true, output: false })
  visa          StudentVisaEntity?
  /// Паспорт
  /// @HideField({ input: true, output: false })
  passport      StudentPassportEntity?

  /// Телефон
  phone   String?
  /// Куратор
  curator String?
  /// Факультет
  faculty String?
  /// Курс
  // TODO: какой максимальный курс может быть?
  course  Int?
  /// Группа
  group   String?

  /// Близкие родственники
  /// @HideField({ input: true, output: false })
  closeRelatives StudentCloseRelativeEntity[]
  /// Визовые анкеты
  /// @HideField({ input: true, output: false })
  visaRequests   StudentVisaRequestEntity[]

  // Служебные поля
  /// @HideField({ input: true, output: false })
  createdAt DateTime @default(now()) @db.Timestamptz
  /// @HideField({ input: true, output: false })
  updatedAt DateTime @updatedAt @db.Timestamptz
}

/// Близкие родственники студента
model StudentCloseRelativeEntity {
  /// @FieldType('Scalars.GraphQLUUID')
  id        String        @id() @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  /// @HideField({ input: true, output: false })
  student   StudentEntity @relation(fields: [studentId], references: [id], onDelete: Cascade)
  /// @FieldType('Scalars.GraphQLUUID')
  studentId String        @db.Uuid

  /// Фамилия
  lastName                   String?
  /// Имя
  firstName                  String?
  /// Отчество
  patronymic                 String?
  /// Дата рождения
  birthDate                  DateTime? @db.Timestamptz
  /// Гражданство
  citizenship                String?
  /// Постоянное место жительства
  addressContinuousResidence String?
  // TODO: Кем является
  // TODO: Контактный номер телефона + почта
  // TODO: при окончании визы можно уведомлять близких родственников

  // Служебные поля
  /// @HideField({ input: true, output: false })
  createdAt DateTime @default(now()) @db.Timestamptz
  /// @HideField({ input: true, output: false })
  updatedAt DateTime @updatedAt @db.Timestamptz
}

/// Уведомление о прибытии студента
model StudentArrivalNoticeEntity {
  /// @FieldType('Scalars.GraphQLUUID')
  id        String        @id() @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  /// @HideField({ input: true, output: false })
  student   StudentEntity @relation(fields: [studentId], references: [id], onDelete: Cascade)
  /// @FieldType('Scalars.GraphQLUUID')
  studentId String        @unique @db.Uuid

  /// Профессия. Заполняется только сотрудниками.
  profession    String?
  /// Адрес регистрации
  address       String?
  /// Дата регистрации
  date          DateTime? @db.Timestamptz
  /// Дата окончания регистрации
  expires       DateTime? @db.Timestamptz
  /// Приглашающая сторона
  invitingSide  String?
  /// Принимающая сторона
  receivingSide String?

  // Служебные поля
  /// @HideField({ input: true, output: false })
  createdAt DateTime @default(now()) @db.Timestamptz
  /// @HideField({ input: true, output: false })
  updatedAt DateTime @updatedAt @db.Timestamptz
}

// TODO: Для формирования документа на основе всех данных нужна будет дополнительная таблица "Остальное"... поля нужно будет делать с Гаисом

/// Миграционная карта студента
model StudentMigrationCardEntity {
  /// @FieldType('Scalars.GraphQLUUID')
  id        String        @id() @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  /// @HideField({ input: true, output: false })
  student   StudentEntity @relation(fields: [studentId], references: [id], onDelete: Cascade)
  /// @FieldType('Scalars.GraphQLUUID')
  studentId String        @unique @db.Uuid

  /// Серия
  series         String?
  /// Номер
  number         String?
  /// Дата выдачи
  issueDate      DateTime? @db.Timestamptz
  /// Дата истечения
  expirationDate DateTime? @db.Timestamptz

  // Служебные поля
  /// @HideField({ input: true, output: false })
  createdAt DateTime @default(now()) @db.Timestamptz
  /// @HideField({ input: true, output: false })
  updatedAt DateTime @updatedAt @db.Timestamptz
}

/// Виза студента
model StudentVisaEntity {
  /// Идентификатор визы
  /// @FieldType('String')
  id        String        @id()
  /// @HideField({ input: true, output: false })
  student   StudentEntity @relation(fields: [studentId], references: [id], onDelete: Cascade)
  /// @FieldType('Scalars.GraphQLUUID')
  studentId String        @unique @db.Uuid

  /// Серия бланка
  blankSeries      String?
  /// Номер
  number           String?
  /// Дата выдачи
  issueDate        DateTime? @db.Timestamptz
  /// Дата истечения
  expirationDate   DateTime? @db.Timestamptz
  /// Номер приглашения
  invitationNumber String?
  // TODO: "дата выдачи" и дата начала действия - две разные даты. Въезд с и по (дата истечения)
  // TODO: Уведомление должно быть за 45 дней до истечения визы

  // Служебные поля
  /// @HideField({ input: true, output: false })
  createdAt DateTime @default(now()) @db.Timestamptz
  /// @HideField({ input: true, output: false })
  updatedAt DateTime @updatedAt @db.Timestamptz
}

/// Пол
enum GenderEnum {
  Male
  Female
}

/// Паспорт студента
model StudentPassportEntity {
  /// @FieldType('Scalars.GraphQLUUID')
  id        String        @id() @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  /// @HideField({ input: true, output: false })
  student   StudentEntity @relation(fields: [studentId], references: [id], onDelete: Cascade)
  /// @FieldType('Scalars.GraphQLUUID')
  studentId String        @unique @db.Uuid

  /// Фамилия
  lastName       String?
  /// Имя
  firstName      String?
  /// Отчество
  patronymic     String?
  /// Дата рождения
  birthDate      DateTime?   @db.Timestamptz
  /// Место рождения
  birthPlace     String?
  /// Пол
  gender         GenderEnum?
  /// Гражданство
  // TODO: сделать выпадающим списком
  citizenship    String?
  /// Серия
  series         String?
  /// Номер
  number         String?
  /// Дата выдачи
  issueDate      DateTime?   @db.Timestamptz
  /// Кем выдан
  issuedBy       String?
  /// Дата истечения
  expirationDate DateTime?   @db.Timestamptz

  // Служебные поля
  /// @HideField({ input: true, output: false })
  createdAt DateTime @default(now()) @db.Timestamptz
  /// @HideField({ input: true, output: false })
  updatedAt DateTime @updatedAt @db.Timestamptz
}

/// Требуемая кратность визы в визовой анкете
enum VisaMultiplicityEnum {
  /// Однократная
  Single
  /// Двукратная
  Double
  /// Многократная
  Multiple
}

/// Требуемая категория визы в визовой анкете
enum VisaCategoryEnum {
  /// обыкновенная - частная
  RegularPrivate
  /// обыкновенная - гуманитарная
  RegularHumanitarian
  /// обыкновенная - деловая
  RegularBusiness
  /// обыкновенная - рабочая
  RegularWorking
  /// обыкновенная - туристическая
  RegularTourist
  /// обыкновенная - туристическая групповая
  RegularGroupTravel
  /// обыкновенная - учебная
  RegularStudy
  /// обыкновенная - на въезд в РФ в целях приёма в гражданство РФ
  RegularNationalEntry
  /// транзитная
  Transit
  /// временно проживающего лица
  TemporaryResident
}

/// Статус анкеты на визу
enum VisaRequestStatusEnum {
  /// Ожидает проверки сотрудником
  Pending
  /// Требуются правки студента
  PendingCorrectionsByStudent
  /// Проверена
  Verified
  /// Передана в визовый отдел
  Finished
}

/// Визовая анкета студента
model StudentVisaRequestEntity {
  /// @FieldType('Scalars.GraphQLUUID')
  id              String                @id() @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  /// @HideField({ input: true, output: false })
  student         StudentEntity         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  /// @FieldType('Scalars.GraphQLUUID')
  studentId       String                @db.Uuid
  /// Статус визовой анкеты
  status          VisaRequestStatusEnum @default(Pending)
  /// Комментарий сотрудника
  employeeComment String?

  /// Регистрационный номер заполняемый только сотрудником
  registrationNumber                      String?
  /// Категория визы
  category                                VisaCategoryEnum?
  /// Кратность визы
  multiplicity                            VisaMultiplicityEnum?
  /// В связи с ...
  reason                                  String?
  /// Адрес постановки на миграционный учет
  addressOfMigrationRegistration          String?
  /// Маршрут предполагаемого пребывания
  estimatedRouteOfStay                    String?
  /// Адрес в стране постоянного проживания
  addressInCountryOfContinuousResidence   String?
  /// Место работы или учёбы, должность
  placeOfWorkOrStudyAndEmploymentPosition String?
  /// Родственники на территории РФ
  russianFederationRelatives              String?
  /// Прилагаемые документы
  attachedDocuments                       String?

  // Служебные поля
  /// @HideField({ input: true, output: false })
  createdAt DateTime @default(now()) @db.Timestamptz
  /// @HideField({ input: true, output: false })
  updatedAt DateTime @updatedAt @db.Timestamptz
}
